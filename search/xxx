#!/bin/bash

#################################
#
#    usage error
#    
#################################
if [ $# -eq 0 ] 
then
    echo """
    Usage: xxx PATTERN 
    """
    exit 1
fi

>output_file # clear old data

#################################
#
#    billie's xxx
#    
#################################

data=`find . -type d -name .git -prune -o \( \! -name ddd \) -exec grep -in "$1" {} + `
echo "$data">output_file

if [ -z "$data" ] ## output_file is empty, so no match, quit
then
    echo  No match, bye!
    rm output_file 
    exit 
fi

#################################
#
#    process output_file
#    
#################################

declare -a thefilename
declare -a linenumber

count=0
while read line; do 
    echo -ne "\033[1m NO.$(( ++count )):\033[0m"
    thefilename[$count]=`echo $line|awk -F":" '{print $1}'`
    linenumber[$count]=`echo $line|awk -F":" '{print $2}'`

    linecontent=`echo $line|sed 's/^\.\/[a-z1-9]*:[a-z1-9]*://'` 
    # "./filename:linmumber:linecontent" -> "linecontent"
    # can not use awk {print $3}, because we may have "http://www..."
    
    echo ${thefilename[$count]}
    printf "\t $linecontent \n" # echo will expand special characters like * 
done < output_file
rm output_file

#################################
#
#    choose
#    
#################################

echo 
echo 
echo -n " Now which one do you want to open? [1,2,3...$count]  "
read nu


if [ $nu -gt 0 -a $nu -lt $(($count+1)) 2> /dev/null ] ## stderr output when $nu is not a number
then 
    vim +${linenumber[$nu]} ${thefilename[$nu]}
else 
    echo wrong nu
fi

